//package lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model;////import java.time.LocalDateTime;////public class Payment {//    private String paymentId;//    private String memberId;//    private double amount;//    private LocalDateTime paymentDate;//    private String paymentMethod;//    private String description;//    private String status;////    // Constructors//    public Payment() {}////    public Payment(String paymentId, String memberId, double amount, LocalDateTime paymentDate,//                   String paymentMethod, String description, String status) {//        this.paymentId = paymentId;//        this.memberId = memberId;//        this.amount = amount;//        this.paymentDate = paymentDate;//        this.paymentMethod = paymentMethod;//        this.description = description;//        this.status = status;//    }////    // Getters and Setters//    public String getPaymentId() { return paymentId; }//    public void setPaymentId(String paymentId) { this.paymentId = paymentId; }////    public String getMemberId() { return memberId; }//    public void setMemberId(String memberId) { this.memberId = memberId; }////    public double getAmount() { return amount; }//    public void setAmount(double amount) { this.amount = amount; }////    public LocalDateTime getPaymentDate() { return paymentDate; }//    public void setPaymentDate(LocalDateTime paymentDate) { this.paymentDate = paymentDate; }////    public String getPaymentMethod() { return paymentMethod; }//    public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; }////    public String getDescription() { return description; }//    public void setDescription(String description) { this.description = description; }////    public String getStatus() { return status; }//    public void setStatus(String status) { this.status = status; }//}package lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model;import java.time.LocalDateTime;import java.util.List;public class Payment {    private String paymentId;    private String memberId;    private double amount;    private LocalDateTime paymentDate;    private String paymentMethod;    private String description;    private String status;    public Payment() {}    public Payment(String paymentId, String memberId, double amount, LocalDateTime paymentDate,                   String paymentMethod, String description, String status) {        setPaymentId(paymentId);        setMemberId(memberId);        setAmount(amount);        setPaymentDate(paymentDate);        setPaymentMethod(paymentMethod);        setDescription(description);        setStatus(status);    }    public String getPaymentId() { return paymentId; }    public void setPaymentId(String paymentId) {        if (paymentId == null || paymentId.trim().isEmpty()) {            throw new IllegalArgumentException("Payment ID cannot be empty");        }        this.paymentId = paymentId;    }    public String getMemberId() { return memberId; }    public void setMemberId(String memberId) {        if (memberId == null || memberId.trim().isEmpty()) {            throw new IllegalArgumentException("Member ID cannot be empty");        }        this.memberId = memberId;    }    public double getAmount() { return amount; }    public void setAmount(double amount) {        if (amount <= 0) {            throw new IllegalArgumentException("Amount must be positive");        }        this.amount = amount;    }    public LocalDateTime getPaymentDate() { return paymentDate; }    public void setPaymentDate(LocalDateTime paymentDate) {        if (paymentDate == null) {            throw new IllegalArgumentException("Payment date cannot be null");        }        this.paymentDate = paymentDate;    }    public String getPaymentMethod() { return paymentMethod; }    public void setPaymentMethod(String paymentMethod) {        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {            throw new IllegalArgumentException("Payment method cannot be empty");        }        this.paymentMethod = paymentMethod;    }    public String getDescription() { return description; }    public void setDescription(String description) {        this.description = description != null ? description : "";    }    public String getStatus() { return status; }    public void setStatus(String status) {        if (status == null || !List.of("Completed", "Pending", "Failed").contains(status)) {            throw new IllegalArgumentException("Invalid status");        }        this.status = status;    }    @Override    public String toString() {        return paymentId + "," + memberId + "," + amount + "," + paymentDate + "," +                paymentMethod + "," + description + "," + status;    }}