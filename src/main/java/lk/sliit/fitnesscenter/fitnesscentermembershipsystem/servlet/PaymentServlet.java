//package lk.sliit.fitnesscenter.fitnesscentermembershipsystem.servlet;////import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.dao.PaymentDAO;//import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.dao.MemberDAO;//import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.Payment;//import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.CreditCardPayment;//import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.CashPayment;////import jakarta.servlet.*;//import jakarta.servlet.http.*;//import jakarta.servlet.annotation.*;//import java.io.IOException;//import java.time.LocalDateTime;//import java.util.List;////@WebServlet(name = "PaymentServlet", urlPatterns = {"/payments", "/payments/create", "/payments/update", "/payments/delete"})//public class PaymentServlet extends HttpServlet {//    private PaymentDAO paymentDAO;//    private MemberDAO memberDAO;////    @Override//    public void init() {//        paymentDAO = new PaymentDAO();//        memberDAO = new MemberDAO();//    }////    @Override//    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        String action = request.getServletPath();////        try {//            switch (action) {//                case "/payments/create"://                    showPaymentForm(request, response);//                    break;//                default://                    listPayments(request, response);//                    break;//            }//        } catch (Exception ex) {//            throw new ServletException(ex);//        }//    }////    @Override//    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        String action = request.getServletPath();////        try {//            switch (action) {//                case "/payments/create"://                    createPayment(request, response);//                    break;//                case "/payments/update"://                    updatePayment(request, response);//                    break;//                case "/payments/delete"://                    deletePayment(request, response);//                    break;//                default://                    listPayments(request, response);//                    break;//            }//        } catch (Exception ex) {//            throw new ServletException(ex);//        }//    }////    private void listPayments(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        HttpSession session = request.getSession();//        String role = (String) session.getAttribute("role");//        String memberId = (String) session.getAttribute("memberId");////        List<Payment> payments;//        if ("admin".equals(role)) {//            payments = paymentDAO.getAllPayments();//        } else {//            payments = paymentDAO.getPaymentsByMember(memberId);//        }////        request.setAttribute("payments", payments);//        RequestDispatcher dispatcher = request.getRequestDispatcher("/paymentHistory.jsp");//        dispatcher.forward(request, response);//    }////    private void showPaymentForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        RequestDispatcher dispatcher = request.getRequestDispatcher("/paymentForm.jsp");//        dispatcher.forward(request, response);//    }////    private void createPayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        HttpSession session = request.getSession();//        String memberId = (String) session.getAttribute("memberId");//        String paymentMethod = request.getParameter("paymentMethod");////        Payment payment;//        if ("creditCard".equals(paymentMethod)) {//            CreditCardPayment ccPayment = new CreditCardPayment();//            ccPayment.setCardNumber(request.getParameter("cardNumber"));//            ccPayment.setCardHolderName(request.getParameter("cardHolderName"));//            ccPayment.setExpiryDate(request.getParameter("expiryDate"));//            ccPayment.setCvv(request.getParameter("cvv"));//            payment = ccPayment;//        } else {//            CashPayment cashPayment = new CashPayment();//            cashPayment.setReceiptNumber(request.getParameter("receiptNumber"));//            payment = cashPayment;//        }////        payment.setMemberId(memberId);//        payment.setAmount(Double.parseDouble(request.getParameter("amount")));//        payment.setPaymentDate(LocalDateTime.now());//        payment.setDescription(request.getParameter("description"));//        payment.setStatus("Completed");////        String paymentId = paymentDAO.createPayment(payment);////        // Update member's last payment date//        memberDAO.updateLastPaymentDate(memberId, LocalDateTime.now().toLocalDate());////        session.setAttribute("paymentSuccess", "Payment completed successfully. Payment ID: " + paymentId);//        response.sendRedirect("payments");//    }////    private void updatePayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        String paymentId = request.getParameter("paymentId");//        Payment existingPayment = paymentDAO.getPaymentById(paymentId);////        if (existingPayment != null) {//            existingPayment.setAmount(Double.parseDouble(request.getParameter("amount")));//            existingPayment.setDescription(request.getParameter("description"));//            existingPayment.setStatus(request.getParameter("status"));////            paymentDAO.updatePayment(existingPayment);//            request.getSession().setAttribute("paymentSuccess", "Payment updated successfully");//        } else {//            request.getSession().setAttribute("paymentError", "Payment not found");//        }////        response.sendRedirect("payments");//    }////    private void deletePayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//        String paymentId = request.getParameter("paymentId");////        if (paymentDAO.deletePayment(paymentId)) {//            request.getSession().setAttribute("paymentSuccess", "Payment deleted successfully");//        } else {//            request.getSession().setAttribute("paymentError", "Payment not found");//        }////        response.sendRedirect("payments");//    }//}package lk.sliit.fitnesscenter.fitnesscentermembershipsystem.servlet;import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.dao.PaymentDAO;import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.dao.MemberDAO;import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.Payment;import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.CreditCardPayment;import lk.sliit.fitnesscenter.fitnesscentermembershipsystem.model.CashPayment;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.IOException;import java.time.LocalDateTime;import java.util.List;@WebServlet(name = "PaymentServlet", urlPatterns = {"/payments", "/payments/create", "/payments/update", "/payments/delete"})public class PaymentServlet extends HttpServlet {    private PaymentDAO paymentDAO;    private MemberDAO memberDAO;    @Override    public void init() {        paymentDAO = new PaymentDAO();        memberDAO = new MemberDAO();    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        String action = request.getServletPath();        try {            switch (action) {                case "/payments/create":                    showPaymentForm(request, response);                    break;                default:                    listPayments(request, response);                    break;            }        } catch (Exception ex) {            throw new ServletException(ex);        }    }    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        String action = request.getServletPath();        try {            switch (action) {                case "/payments/create":                    createPayment(request, response);                    break;                case "/payments/update":                    updatePayment(request, response);                    break;                case "/payments/delete":                    deletePayment(request, response);                    break;                default:                    listPayments(request, response);                    break;            }        } catch (Exception ex) {            throw new ServletException(ex);        }    }    private void listPayments(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        HttpSession session = request.getSession();        String role = (String) session.getAttribute("role");        String memberId = (String) session.getAttribute("memberId");        if (memberId == null) {            response.sendRedirect("/loginMember.jsp");            return;        }        List<Payment> payments;        if ("admin".equals(role)) {            payments = paymentDAO.getAllPayments();        } else {            payments = paymentDAO.getPaymentsByMember(memberId);        }        request.setAttribute("payments", payments);        RequestDispatcher dispatcher = request.getRequestDispatcher("/paymentHistory.jsp");        dispatcher.forward(request, response);    }    private void showPaymentForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        RequestDispatcher dispatcher = request.getRequestDispatcher("/paymentForm.jsp");        dispatcher.forward(request, response);    }    private void createPayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        HttpSession session = request.getSession();        String memberId = (String) session.getAttribute("memberId");        if (memberId == null) {            session.setAttribute("paymentError", "User not logged in");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        if (memberDAO.getMemberById(memberId) == null) {            session.setAttribute("paymentError", "Invalid member ID");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        String paymentMethod = request.getParameter("paymentMethod");        double amount;        try {            amount = Double.parseDouble(request.getParameter("amount"));            if (amount <= 0) throw new IllegalArgumentException("Amount must be positive");        } catch (NumberFormatException e) {            session.setAttribute("paymentError", "Invalid amount format");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        String description = request.getParameter("description");        if (description == null || description.trim().isEmpty()) {            session.setAttribute("paymentError", "Description is required");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        Payment payment;        if ("creditCard".equals(paymentMethod)) {            CreditCardPayment ccPayment = new CreditCardPayment();            ccPayment.setCardNumber(request.getParameter("cardNumber"));            ccPayment.setCardHolderName(request.getParameter("cardHolderName"));            ccPayment.setExpiryDate(request.getParameter("expiryDate"));            ccPayment.setCvv(request.getParameter("cvv"));            if (ccPayment.getCardNumber() == null || ccPayment.getCardNumber().length() != 16) {                session.setAttribute("paymentError", "Invalid card number");                response.sendRedirect(request.getContextPath() + "/payments");                return;            }            payment = ccPayment;        } else if ("cash".equals(paymentMethod)) {            CashPayment cashPayment = new CashPayment();            cashPayment.setReceiptNumber(request.getParameter("receiptNumber"));            if (cashPayment.getReceiptNumber() == null || cashPayment.getReceiptNumber().trim().isEmpty()) {                session.setAttribute("paymentError", "Receipt number is required");                response.sendRedirect(request.getContextPath() + "/payments");                return;            }            payment = cashPayment;        } else {            session.setAttribute("paymentError", "Invalid payment method");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        payment.setMemberId(memberId);        payment.setAmount(amount);        payment.setPaymentDate(LocalDateTime.now());        payment.setDescription(description);        payment.setStatus("Completed");        String paymentId = paymentDAO.createPayment(payment);        memberDAO.updateLastPaymentDate(memberId, LocalDateTime.now().toLocalDate());        session.setAttribute("paymentSuccess", "Payment completed successfully. Payment ID: " + paymentId);        response.sendRedirect(request.getContextPath() + "/payments");    }    private void updatePayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        HttpSession session = request.getSession();        if (!"admin".equals(session.getAttribute("role"))) {            session.setAttribute("paymentError", "Unauthorized access");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        String paymentId = request.getParameter("paymentId");        Payment existingPayment = paymentDAO.getPaymentById(paymentId);        if (existingPayment != null) {            try {                double amount = Double.parseDouble(request.getParameter("amount"));                if (amount <= 0) throw new IllegalArgumentException("Amount must be positive");                existingPayment.setAmount(amount);            } catch (NumberFormatException e) {                session.setAttribute("paymentError", "Invalid amount format");                response.sendRedirect(request.getContextPath() + "/payments");                return;            }            existingPayment.setDescription(request.getParameter("description"));            existingPayment.setStatus(request.getParameter("status"));            paymentDAO.updatePayment(existingPayment);            session.setAttribute("paymentSuccess", "Payment updated successfully");        } else {            session.setAttribute("paymentError", "Payment not found");        }        response.sendRedirect(request.getContextPath() + "/payments");    }    private void deletePayment(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        HttpSession session = request.getSession();        if (!"admin".equals(session.getAttribute("role"))) {            session.setAttribute("paymentError", "Unauthorized access");            response.sendRedirect(request.getContextPath() + "/payments");            return;        }        String paymentId = request.getParameter("paymentId");        if (paymentDAO.deletePayment(paymentId)) {            session.setAttribute("paymentSuccess", "Payment deleted successfully");        } else {            session.setAttribute("paymentError", "Payment not found");        }        response.sendRedirect(request.getContextPath() + "/payments");    }}